import java.util.*;

public class LoaderThread extends Thread {
    private Queue<PCB> jobQueue;
    private Queue<PCB> readyQueue;
    private PriorityQueue<PCB> priorityQueue;
    private MemoryManagment memory;
    private int schedulingChoice;
    private Flag turn;

    public LoaderThread(Queue<PCB> jobQueue, PriorityQueue<PCB> priorityQueue , Queue<PCB> readyQueue, MemoryManagment memory, int schedulingChoice,Flag turn) {
        this.jobQueue = jobQueue;
        this.priorityQueue = priorityQueue;
        this.readyQueue = readyQueue;
        this.memory = memory;
        this.schedulingChoice = schedulingChoice;
        this.turn = turn;
    }

    @Override
    public void run() {
        synchronized (jobQueue) {
            switch (schedulingChoice) {
                case 1:
                    loadFCFS();
                    break;
                case 2:
                    loadSJF();
                    break;
                case 3:
                    loadRR();
                    break;
                default:
                    System.out.println("Invalid scheduling choice.");
            }
        }
    }

    private void loadFCFS() {
    	    
        synchronized (readyQueue) {
            while (!jobQueue.isEmpty()) {
            	
            	memory.setSwitchToFalse();
                PCB job = jobQueue.peek();

                if (job.memoryRequired <= memory.getAvailableMemory()) {
                    jobQueue.poll();
                    readyQueue.add(job);
                    memory.allocateMemory(job.memoryRequired);
                    job.changeState("READY");
                    System.out.println("Job " + job.id + " loaded for Round Robin. Remaining Memory: " + memory.getAvailableMemory() + " MB.");
                    turn.setTurnToTrue();
                } else {
                    try {
                        System.out.println("Not enough memory for Job " + job.id + ". Waiting...");
                        turn.setTurnToTrue();
                        readyQueue.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        System.out.println("Loader interrupted while waiting for memory.");
                        return;
                    }
                }

                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    System.out.println("Loader interrupted during delay.");
                    return;
                }
            }
        }
    }
        
        

    

    private void loadSJF() {
    	 synchronized (readyQueue) {
             while (!priorityQueue.isEmpty()) {
            	 System.out.println("Loader new iteration...");
             	
             	memory.setSwitchToFalse();
                 PCB job = priorityQueue.peek();

                 if (job.memoryRequired <= memory.getAvailableMemory()) {
                     priorityQueue.remove();
                     readyQueue.add(job);
                     memory.allocateMemory(job.memoryRequired);
                     job.changeState("READY");
                     System.out.println("Job " + job.id + " loaded for SJF. Remaining Memory: " + memory.getAvailableMemory() + " MB.");
                     turn.setTurnToTrue();
                 } else {
                     try {
                         System.out.println("Not enough memory for Job " + job.id + ". Waiting...");
                         turn.setTurnToTrue();
                         readyQueue.wait();
                     } catch (InterruptedException e) {
                         Thread.currentThread().interrupt();
                         System.out.println("Loader interrupted while waiting for memory.");
                         return;
                     }
                 }

                 try {
                     Thread.sleep(100);
                 } catch (InterruptedException e) {
                     Thread.currentThread().interrupt();
                     System.out.println("Loader interrupted during delay.");
                     return;
                 }
             }
         }
    
    }



    private void loadRR() {
        System.out.println("Loading jobs using Round Robin with Quantum..");
        
        synchronized (readyQueue) {
            while (!jobQueue.isEmpty()) {
            	
            	turn.setTurnToFalse();
                PCB job = jobQueue.peek();

                if (job.memoryRequired <= memory.getAvailableMemory()) {
                    jobQueue.poll();
                    readyQueue.add(job);
                    memory.allocateMemory(job.memoryRequired);
                    job.changeState("READY");
                    System.out.println("Job " + job.id + " loaded for Round Robin. Remaining Memory: " + memory.getAvailableMemory() + " MB.");
                    turn.setTurnToTrue();
                } else {
                    try {
                        System.out.println("Not enough memory for Job " + job.id + ". Waiting...");
                        turn.setTurnToTrue();
                        readyQueue.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        System.out.println("Loader interrupted while waiting for memory.");
                        return;
                    }
                }

                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    System.out.println("Loader interrupted during delay.");
                    return;
                }
            }
        }
    }
}
